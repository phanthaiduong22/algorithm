struct option 
{
	bool operator()(const pair<int, int>& a, const pair<int, int>& b) const
	{
		return a.second > b.second;
	}
};

bool option(int a,int b)	
{
	return a<b;
}

// Function to reverse the linked list
void reverselist(Node** head)
{
    // Initialize prev and current pointers
    Node *prev = NULL, *curr = *head, *next;
 
    while (curr) {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }
 
    *head = prev;
}

// Kmp preprocess
int i = 1, j = 0, n = str.size();
vector<int> dp(n+1,0);
while( i < str.size() ){
    if( str[i] == str[j] ) dp[++i]=++j;
    else if( j == 0 ) i++;
    else j = dp[j];
}

//reference: tham chieu

#define max(a,b) (a>b?a:b)
#define min(a,b) (a<b?a:b)

//mod
(a*b)%c=((a%c)*(b%c))%c

if(b chan)
(a^b)%c=((a^b/2)*(a^b/2))%c
if(b le)
(a^b)%=(a*(a^(b-1))%c

neu muon tra ve gia tri mod cua so am.
vi du: x%y=(x+y)%y(x la so am)

//bit
(a+b)=(a^b)+(a&b)

//gcd
int gcd(int a, int b)
{
	if (b == 0) return a;
	else return gcd(b, a % b);
}

// lcm
int lcm(int a, int b){
	return (a / gcd(a, b)) * b;
}

int mod(int x, int m) {
    return (x%m + m)%m;
}

0deg rotation : i, j will point to i, j
90deg rotation : i, j will point to j, n - i - 1
180deg rotation : i, j will point to n - i - 1, n - j - 1
270deg rotation : i, j will point to n - j - 1, i
